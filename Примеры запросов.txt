Получить всех пользователей

SELECT *
FROM users;

Получить пользователя по ИД

SELECT *
FROM users
WHERE user_id =:user_id;

Получить все фильмы

SELECT *
FROM films;

Получить фильм по ИД

SELECT *
FROM films
WHERE film_id =:film_id;

Получить  список пользователей, являющихся его друзьями

SELECT *
FROM users as u
LEFT JOIN friends as f ON u.user_id=f.user_id
WHERE user_id =:user_id;

Создать таблицу пользователей

CREATE TABLE users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR(32) NOT NULL,
    name VARCHAR(32) NOT NULL,
    email VARCHAR(128) NOT NULL,
    birthday DATE NOT NULL
);

Создать таблицу друзей

CREATE TABLE friends (
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (id) ON DELETE CASCADE,
    status INTEGER NOT NULL DEFAULT 0
);

ALTER TABLE friends ADD CONSTRAINT fk_friends_to_user FOREIGN KEY (user_id) REFERENCES users;
ALTER TABLE friends ADD CONSTRAINT fk_friends_to_user FOREIGN KEY (friend_id) REFERENCES users;


Создать таблицу фильмов

CREATE TABLE films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(128) NOT NULL,
    description VARCHAR(256) NOT NULL,
    release_date DATE NOT NULL,
    duration INTEGER NOT NULL,
    rate int,
    mpa_id INTEGER REFERENCES mpa (id) ON DELETE RESTRICT
);

ALTER TABLE film ADD CONSTRAINT fk_film_to_mpa FOREIGN KEY (mpa_id) REFERENCES mpa;

Таблица film_likes

CREATE TABLE film_likes (
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (id) ON DELETE CASCADE
);

ALTER TABLE film_likes ADD CONSTRAINT fk_film_likes_to_film FOREIGN KEY (film_id) REFERENCES films;
ALTER TABLE film_likes ADD CONSTRAINT fk_film_likes_to_user FOREIGN KEY (user_id) REFERENCES users;

Таблица film_genres

CREATE TABLE film_genres (
    film_id INTEGER REFERENCES films (id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (id) ON DELETE CASCADE
);

ALTER TABLE film_genres ADD CONSTRAINT fk_genres_to_film FOREIGN KEY (film_id) REFERENCES films;
ALTER TABLE film_genres ADD CONSTRAINT fk_genres_to_genre FOREIGN KEY (genre_id) REFERENCES genres;

Таблица genres

CREATE TABLE genres (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(128) NOT NULL
);

Создание таблицы mpa

CREATE TABLE mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(128) NOT NULL
);

Добавление пользователей

INSERT INTO users(login,name,email,birthday)
VALUES(:login,:name,:email,:birthday)

Добавление фильмов

INSERT INTO films(name,release_date,description,duration)
VALUES(:name,:release_date,:description,:duration)

Получить все mpa

SELECT *
FROM mpa;

Получить все жанры

SELECT *
FROM genres;

Изменить фильм

UPDATE films f SET
f.name = :name,
f.description = :description,
f.release_date = :release_date,
f.mpa_id = :mpa_id
WHERE f.id = :film_id;

Изменить пользователя

UPDATE users u SET
u.login = :login,
u.name = :name,
u.email = :email,
u.birthday = :birthday
WHERE u.id = :user_id;